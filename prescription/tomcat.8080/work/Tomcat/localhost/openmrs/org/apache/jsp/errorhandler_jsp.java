/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.67
 * Generated at: 2016-10-13 14:04:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import org.apache.commons.lang.StringUtils;
import org.openmrs.web.WebConstants;
import org.openmrs.api.APIAuthenticationException;
import org.openmrs.api.context.ContextAuthenticationException;
import org.apache.commons.logging.Log;
import org.openmrs.api.context.Context;
import org.apache.commons.logging.LogFactory;

public final class errorhandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/taglibs/openmrs.tld", Long.valueOf(1460400300000L));
    _jspx_dependants.put("/WEB-INF/view/authorizationHandlerInclude.jsp", Long.valueOf(1460400300000L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fopenmrs_005fextensionPoint_0026_005ftype_005fpointId_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fopenmrs_005fextensionPoint_0026_005ftype_005fpointId_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fopenmrs_005fextensionPoint_0026_005ftype_005fpointId_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    java.lang.Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);
    if (exception != null) {
      response.setStatus(javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

if (exception.getCause() != null && (ContextAuthenticationException.class.equals(exception.getCause().getClass())
		        || APIAuthenticationException.class.equals(exception.getCause().getClass()))) {
	//convert it back to the actual exception that was thrown
	exception = exception.getCause();

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	if (ContextAuthenticationException.class.equals(exception.getClass())
	        || APIAuthenticationException.class.equals(exception.getClass())) {
		
		Log log = LogFactory.getLog(this.getClass().getName());
		if (Context.getAuthenticatedUser() != null) {
			log.error("Exception was thrown by user with id=" + Context.getAuthenticatedUser().getUserId(),
			    exception);
			
			session.setAttribute(WebConstants.INSUFFICIENT_PRIVILEGES, true);
			session.setAttribute(WebConstants.UNCAUGHT_EXCEPTION_MESSAGE,
			    StringUtils.isNotBlank(exception.getMessage()) ? exception.getMessage() : "");
			
			Object requestUrl = request.getAttribute("javax.servlet.error.request_uri");
			if (requestUrl != null) {
				String uri = (String) request.getAttribute("javax.servlet.error.request_uri");
				if (StringUtils.isNotBlank(uri))
					session.setAttribute(WebConstants.DENIED_PAGE, uri);
				
				if (request.getQueryString() != null)
					uri = uri + "?" + request.getQueryString();
				
				session.setAttribute(WebConstants.OPENMRS_LOGIN_REDIRECT_HTTPSESSION_ATTR, uri);
			}
			
			session.setAttribute(WebConstants.REFERER_URL, request.getHeader("Referer"));
			response.sendRedirect(request.getContextPath() + "/login.htm");
		} else {
			log.error("Exception was thrown by not authenticated user", exception);
			response.sendRedirect(request.getContextPath() + "/login.htm");
		}
	}

      out.write('\n');
      out.write('\n');

}else{

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("<font color=\"red\">\n");
      out.write("<h2>An error has occurred!</h2>\n");
      out.write("The following error happened somewhere on this page:<br/>\n");
      out.print( exception.toString() );
      out.write("\n");
      out.write("\n");
      out.write("<br/><br/>\n");
      out.write("(The full error stack trace output is in the source of this page.)\n");
      out.write("</font>\n");
      out.write("\n");
      if (_jspx_meth_openmrs_005fextensionPoint_005f0(_jspx_page_context))
        return;
      out.write('\n');

org.apache.commons.logging.LogFactory.getLog(getClass()).error("Error on page " + request.getRequestURI(), exception);

org.openmrs.api.context.Context.openSession();

if (org.openmrs.api.context.Context.isAuthenticated() == false) {
	out.println("<!-- There is no stack trace here because you are not authenticated -->");
}
else {
	out.println("<!--");
	StringWriter sw = new StringWriter();
	PrintWriter pw = new PrintWriter(sw);
	exception.printStackTrace(pw);
	out.print(sw);
	sw.close();
	pw.close();
	out.println("-->");
}
org.openmrs.api.context.Context.closeSession();

//end else
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_openmrs_005fextensionPoint_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  openmrs:extensionPoint
    org.openmrs.module.web.taglib.ExtensionPointTag _jspx_th_openmrs_005fextensionPoint_005f0 = (org.openmrs.module.web.taglib.ExtensionPointTag) _005fjspx_005ftagPool_005fopenmrs_005fextensionPoint_0026_005ftype_005fpointId_005fnobody.get(org.openmrs.module.web.taglib.ExtensionPointTag.class);
    _jspx_th_openmrs_005fextensionPoint_005f0.setPageContext(_jspx_page_context);
    _jspx_th_openmrs_005fextensionPoint_005f0.setParent(null);
    // /errorhandler.jsp(33,0) name = pointId type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_openmrs_005fextensionPoint_005f0.setPointId("org.openmrs.errorHandler");
    // /errorhandler.jsp(33,0) name = type type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_openmrs_005fextensionPoint_005f0.setType("html");
    int _jspx_eval_openmrs_005fextensionPoint_005f0 = _jspx_th_openmrs_005fextensionPoint_005f0.doStartTag();
    if (_jspx_th_openmrs_005fextensionPoint_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fopenmrs_005fextensionPoint_0026_005ftype_005fpointId_005fnobody.reuse(_jspx_th_openmrs_005fextensionPoint_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fopenmrs_005fextensionPoint_0026_005ftype_005fpointId_005fnobody.reuse(_jspx_th_openmrs_005fextensionPoint_005f0);
    return false;
  }
}
